<?xml version="1.0"?>
<launch>

<!-- Launch file traj controllers Version 1.0 -->

<!--##################################### DEFINITION OF ARGUMENTS  ###########################################-->

  <!-- Arguments you can pass this launch file, for example paused:=true -->
  <arg name="Rviz_on" default="true" doc="If true, start Rviz and the joint state gui" />
  <arg name="use_joint_gui" default="false" doc="If true, start Rviz and the joint state gui" />
  <arg name="paused" default="false"/>
  <arg name="use_sim_time" default="true"/>
  <arg name="Gazebo_gui" default="true"/>
  <arg name="headless" default="false"/>
  <arg name="debug" default="false"/>
  <arg name="UR_Flange" default = "false" doc="true to visualize the UR flange with the Mia Hand" />
  <arg name="robotNamespace"         default="mia_hand_sim"/> <!-- /mia_hand -->
  <arg name="load_default_mia_model" default="false" />


  <!-- Argument to select the type traj controller -->
 <arg name="tc_type" default="vel"  doc="type of trajectory controller to launch. Values: vel, pos, eff"/>
 <arg name="eff_interface" default="false"  doc="Set true when use tc_type eff to load effort interface"/>

 <!--##################################### LOAD the correct Hw interface and URDF  ###########################################-->

 <!-- Arguments to upload hardware interface and controllers of each finger -->
 <!-- arg name="hw_interface_XX"  set the type of hardware interface for joint XX. Possible Values: EffortJointInterface, PositionJointInterface VelocityJointInterface"-->
 <!-- INFO: With Effort controllers the Effort joint Interface must be set, with Velocity or Position controllers both VelocityJointInterface and PositionJointInterface
      can be set whit the MiaHwSim class -->


  <!-- group to be run with effort trajectory interface-->
  <group if="$(arg eff_interface)">

    <arg name="hw_interface_thumb_fle" default="EffortJointInterface"  doc="type of hardware interface for thumb flexion. Values: EffortJointInterface, PositionJointInterface VelocityJointInterface"/>
    <arg name="hw_interface_index_fle" default="EffortJointInterface"  doc="type of hardware interface for index flexion. Values: EffortJointInterface, PositionJointInterface VelocityJointInterface"/>
    <arg name="hw_interface_mrl_fle"   default="EffortJointInterface"  doc="type of hardware interface for mrl flexion. Values: EffortJointInterface, PositionJointInterface VelocityJointInterface"/>

    <!-- Load robot URDF to param server and run robot_state_publisher for rviz etc -->
    <include file="$(find mia_hand_description)/launch/view_mia_hand_rviz.launch">
      <arg name="Rviz_on" value="$(arg Rviz_on)"/>
      <arg name="use_joint_gui" value="$(arg use_joint_gui)"/>
      <arg name="hw_interface_thumb_fle" value="$(arg hw_interface_thumb_fle)"/>
      <arg name="hw_interface_index_fle" value="$(arg hw_interface_index_fle)"/>
      <arg name="hw_interface_mrl_fle" value="$(arg hw_interface_mrl_fle)"/>
      <arg name="UR_Flange" value="$(arg UR_Flange)"/>
      <arg name="robotNamespace"   value="$(arg robotNamespace)"/> <!-- /mia_hand -->
      <arg name="load_default_mia_model"   value="$(arg load_default_mia_model)"/>
    </include>

  </group>


  <!-- group to be run with Velocity or Position trajectory interface-->
  <group unless="$(arg eff_interface)">

    <arg name="hw_interface_thumb_fle" default="PositionJointInterface" doc="Values: EffortJointInterface, PositionJointInterface VelocityJointInterface"/>
    <arg name="hw_interface_index_fle" default="PositionJointInterface" doc="Values: EffortJointInterface, PositionJointInterface VelocityJointInterface"/>
    <arg name="hw_interface_mrl_fle" default="PositionJointInterface"   doc="Values: EffortJointInterface, PositionJointInterface VelocityJointInterface"/>

    <!-- Load robot URDF to param server and run robot_state_publisher for rviz etc -->
    <include file="$(find mia_hand_description)/launch/view_mia_hand_rviz.launch">
      <arg name="Rviz_on" value="$(arg Rviz_on)"/>
      <arg name="use_joint_gui" value="$(arg use_joint_gui)"/>
      <arg name="hw_interface_thumb_fle" value="$(arg hw_interface_thumb_fle)"/>
      <arg name="hw_interface_index_fle" value="$(arg hw_interface_index_fle)"/>
      <arg name="hw_interface_mrl_fle" value="$(arg hw_interface_mrl_fle)"/>
      <arg name="UR_Flange" value="$(arg UR_Flange)"/>
      <arg name="robotNamespace"   value="$(arg robotNamespace)"/> <!-- /mia_hand -->
      <arg name="load_default_mia_model"   value="$(arg load_default_mia_model)"/>

    </include>

  </group>


<!--##################################### LOAD the GAZEBO world  ###########################################-->


  <!-- Gazebo empty_world.launch  -->
  <include file="$(find gazebo_ros)/launch/empty_world.launch">
    <arg name="debug" value="$(arg debug)" />
    <arg name="gui" value="$(arg Gazebo_gui)" />
    <arg name="paused" value="$(arg paused)"/>
    <arg name="use_sim_time" value="$(arg use_sim_time)"/>
    <arg name="headless" value="$(arg headless)"/>
    <arg name="physics" value="ode" />
  </include>




<!--##################################### SPAWN TRAJ CONTROLLERS  ###########################################-->


   <!-- Run a python script to the send a service call to gazebo_ros to spawn a URDF robot -->
  <node name="urdf_spawner" pkg="gazebo_ros" type="spawn_model" respawn="false" output="screen"
        args="-urdf -model mia_hand -param robot_description"/>

  <!-- Load joint transmission and controller configurations from YAML file to parameter server -->
<group ns = "$(arg robotNamespace)">
  <!-- Load the path of the config file of the MIA trasnsmission -->
  <param name="mia_transmissions_config_" type="string" value="$(find mia_hand_description)/calibration/transmission_config.yaml " />

  <rosparam file="$(find mia_hand_gazebo)/config/mia_hand_controllers.yaml" command="load"/>
  <rosparam file="$(find mia_hand_gazebo)/config/mia_hand_trajectory_controllers.yaml" command="load"/>
  <rosparam file="$(find mia_hand_gazebo)/config/gazebo_pid_thumb_opp.yaml" command="load"/>
</group>


<!-- spawn controller -->
  <node name="trajectory_ctrl_spawner" pkg="controller_manager" type="spawner"
        output="screen"  ns="$(arg robotNamespace)" args="mia_hand_$(arg tc_type)_trajectory_controller" />

   <node pkg="controller_manager" type="spawner" name="joint_state_controller_spawner"
        output="screen" ns="$(arg robotNamespace)"  args="joint_state_controller" />


   <!-- Load gui to teleop -->
  <node name="rqt_joint_trajectory_controller" pkg="rqt_joint_trajectory_controller" type="rqt_joint_trajectory_controller" />


</launch>
